#---- begin snakebids boilerplate ----------------------------------------------

import snakebids
from snakebids import bids

configfile: 'config/snakebids.yml'

#writes inputs_config.yml and updates config dict
config.update(
    snakebids.generate_inputs(
        bids_dir=config["bids_dir"],
        pybids_inputs=config["pybids_inputs"],
        derivatives=config["derivatives"],
        participant_label=config["participant_label"],
        exclude_participant_label=config["exclude_participant_label"]
    )
)



#this adds constraints to the bids naming
wildcard_constraints:  **snakebids.get_wildcard_constraints(\
    config["pybids_inputs"]\
)

#---- end snakebids boilerplate ------------------------------------------------


#additional constraints for wildcards not defined from inputs
wildcard_constraints:
    desc='[a-zA-Z0-9]+',
    fwhm='[0-9]+',
    confounds='[0-9]+'

run_aroma_test = True if 'mixing' in config['input_path'].keys() and 'noiseICs' in config['input_path'].keys() else False
desc_list = ['denoised','AROMAdenoised'] if run_aroma_test else ['denoised']

rule all:
    input: 
        # using the zip lists to expand over all scans, note use of the zip option in expand:
        denoised = expand(
                        expand(
                            bids(root='results',datatype='func',desc='{{desc}}',fwhm='{{fwhm}}',confounds='{{confounds_idx}}',suffix='bold.nii.gz',**config['input_wildcards']['preproc_bold']),
                             zip, **config['input_zip_lists']['preproc_bold']),
                        fwhm=config['fwhm'],confounds_idx=range(1,len(config['confounds'])+1),desc=desc_list)

  
include: 'rules/volume.smk'

if run_aroma_test:
    include: 'rules/aroma.smk'